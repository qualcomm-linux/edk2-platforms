## @file
# EDK II Project.fdf file
#
# Copyright (C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

[Defines]
  DEFINE FD_SIZE                   = 0x00900000
  DEFINE FD_NumBlocks              = 0x0900

[FD.Chachani]
  BaseAddress   = 0x00000000 #0xFF800000

!if $(COMPRESS_FSP_REGION) == TRUE
  Size          = 0x005C0000
!else
  Size          = 0x007F0000
!endif
  ErasePolarity = 1
  BlockSize     = 0x00001000
!if $(COMPRESS_FSP_REGION) == TRUE
  NumBlocks     = 0x5C0
!else
  NumBlocks     = 0x7F0
!endif

  SET gPlatformPkgTokenSpaceGuid.PcdFlashAbImageSlotImageSize = $(FD_SIZE)

  #
  # PSP/BIOS L2 Directory
  #  Size: 0x280000 (2.5MB)
  #
  # PSPDIR
  0x0|0x202000
  # BIOSDIR
  0x202000|0x60000

  #
  # NVRAM Area
  #  Size: 0x80000 (512KB)
  #
  0x300000|0x3E000
  gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableBase|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableSize
  #NV_VARIABLE_STORE
  DATA = {
    ## This is the EFI_FIRMWARE_VOLUME_HEADER
    # ZeroVector []
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    # FileSystemGuid: gEfiSystemNvDataFvGuid         =
    #  { 0xFFF12B8D, 0x7696, 0x4C8B, { 0xA9, 0x85, 0x27, 0x47, 0x07, 0x5B, 0x4F, 0x50 }}
    0x8D, 0x2B, 0xF1, 0xFF, 0x96, 0x76, 0x8B, 0x4C,
    0xA9, 0x85, 0x27, 0x47, 0x07, 0x5B, 0x4F, 0x50,
    # FvLength: 0x80000
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    #Signature "_FVH"       #Attributes
    0x5f, 0x46, 0x56, 0x48, 0xff, 0xfe, 0x04, 0x00,
    #HeaderLength #CheckSum #ExtHeaderOffset #Reserved #Revision
    0x48, 0x00, 0x2A, 0x09, 0x00, 0x00, 0x00, 0x02,
    #Blockmap[0]: 7 Blocks * 0x10000 Bytes / Block
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    #Blockmap[1]: End
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ## This is the VARIABLE_STORE_HEADER
    !if $(SECURE_BOOT_ENABLE) == TRUE
      #Signature: gEfiAuthenticatedVariableGuid =  { 0xaaf32c78, 0x947b, 0x439a, { 0xa1, 0x80, 0x2e, 0x14, 0x4e, 0xc3, 0x77, 0x92 }}
      0x78, 0x2c, 0xf3, 0xaa, 0x7b, 0x94, 0x9a, 0x43,
      0xa1, 0x80, 0x2e, 0x14, 0x4e, 0xc3, 0x77, 0x92,
    !else
      #Signature: gEfiVariableGuid =  { 0xddcf3616, 0x3275, 0x4164, { 0x98, 0xb6, 0xfe, 0x85, 0x70, 0x7f, 0xfe, 0x7d }}
      0x16, 0x36, 0xcf, 0xdd, 0x75, 0x32, 0x64, 0x41,
      0x98, 0xb6, 0xfe, 0x85, 0x70, 0x7f, 0xfe, 0x7d,
    !endif
    #Size: 0x3E000 (gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableSize) - 0x48 (size of EFI_FIRMWARE_VOLUME_HEADER) = 0x03DFB8
    # This can speed up the Variable Dispatch a bit.
    0xB8, 0xDF, 0x03, 0x00,
    #FORMATTED: 0x5A #HEALTHY: 0xFE #Reserved: UINT16 #Reserved1: UINT32
    0x5A, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
  0x33E000|0x2000
  gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwWorkingBase|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwWorkingSize
  #NV_FTW_WORKING
  DATA = {
    # EFI_FAULT_TOLERANT_WORKING_BLOCK_HEADER->Signature = gEdkiiWorkingBlockSignatureGuid         =
    #  { 0x9e58292b, 0x7c68, 0x497d, { 0xa0, 0xce, 0x65,  0x0, 0xfd, 0x9f, 0x1b, 0x95 }}
    0x2B, 0x29, 0x58, 0x9E, 0x68, 0x7C, 0x7D, 0x49,
    0xA0, 0xCE, 0x65, 0x0,  0xFD, 0x9F, 0x1B, 0x95,

    # Crc:UINT32            #WorkingBlockValid:1, WorkingBlockInvalid:1, Reserved
    0xE2, 0x33, 0xF2, 0x3,  0xFE, 0xFF, 0xFF, 0xFF,
    # WriteQueueSize: UINT64 #Size: 0x2000 - 0x20 (FTW_WORKING_HEADER) = 0x1FE0
    0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
  0x340000|0x40000
  gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwSpareBase|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwSpareSize

  # FV_MAIN
  0x480000|0x140000
  FV = FVMAIN_COMPACT
!if $(COMPRESS_FSP_REGION) == TRUE
[FD.ChachaniSPHPei]
BaseAddress   = 0x5C0000
Size          = 0x310000
ErasePolarity = 1
BlockSize     = 0x00001000
NumBlocks     = 0x310

0x00000|0xC0000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspmBaseAddressInMemory    = 0x09A00000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspmRegionSize             = 0xC0000
  FILE =FspBlobs/Fsp/VangoghSet1ExternalReleaseM.fd

0xC0000|0x90000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspsBaseAddressInMemory    = 0x09A00000 + 0xC0000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspsRegionSize             = 0x90000
  FILE =FspBlobs/Fsp/VangoghSet1ExternalReleaseS.fd

0x150000|0x30000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoPeiBaseAddressInMemory = 0x09A00000 + 0x150000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoPeiRegionSize          = 0x30000
  FILE =FspBlobs/FSPO/FSP-O_PEI.Fv

0x180000|0x90000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoDxeBaseAddressInMemory = 0x09A00000 + 0x180000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoDxeRegionSize          = 0x90000
  FILE =FspBlobs/FSPO/FSP-O_DXE.Fv

0x210000|0x100000
  DEFINE FV_RECOVERY_IN_MEM_BASE   = 0x09C10000   #0x09A00000 + 0x210000
  SET gPlatformPkgTokenSpaceGuid.PcdMemoryFvRecoveryBase = $(FV_RECOVERY_IN_MEM_BASE)
  gPlatformPkgTokenSpaceGuid.PcdFlashFvRecoveryBase|gPlatformPkgTokenSpaceGuid.PcdFlashFvRecoverySize
  FV = RECOVERYFV
!else
  0x5C0000|0x30000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoPeiBaseAddressInMemory = 0x09A00000 + 0x150000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoPeiBaseAddressInFlash  = 0xFF000000 + 0x640000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoPeiRegionSize          = 0x30000
  FILE =FspBlobs/FSPO/FSP-O_PEI.Fv

  0x5F0000|0xC0000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspmBaseAddressInMemory    = 0x09A00000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspmBaseAddressInFlash     = 0xFF000000 + 0x670000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspmRegionSize             = 0xC0000
  FILE =FspBlobs/FSP/VangoghSet1ExternalReleaseM.fd

  0x6B0000|0x90000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspsBaseAddressInMemory    = 0x09A00000 + 0xC0000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspsBaseAddressInFlash     = 0xFF000000 + 0x730000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspsRegionSize             = 0x90000
  FILE =FspBlobs/FSP/VangoghSet1ExternalReleaseS.fd

  0x740000|0x90000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoDxeBaseAddressInMemory = 0x09A00000 + 0x180000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoDxeBaseAddressInFlash  = 0xFF000000 + 0x7C0000
  SET gFsp2WrapperTokenSpaceGuid.PcdFspoDxeRegionSize          = 0x90000
  FILE =FspBlobs/FSPO/FSP-O_DXE.Fv

[FD.ChachaniSPHPei]
BaseAddress   = 0x7C0000
Size          = 0x100000
ErasePolarity = 1
BlockSize     = 0x00001000
NumBlocks     = 0x100
  DEFINE FV_RECOVERY_IN_MEM_BASE   = 0x09C10000   #0x09A00000 + 0x210000
  SET gPlatformPkgTokenSpaceGuid.PcdMemoryFvRecoveryBase = $(FV_RECOVERY_IN_MEM_BASE)
# FV_RECOVERY
0x0|0x100000
  gPlatformPkgTokenSpaceGuid.PcdFlashFvRecoveryBase|gPlatformPkgTokenSpaceGuid.PcdFlashFvRecoverySize
  FV = RECOVERYFV
!endif

[FV.RECOVERYFV]
  BlockSize          = 0x10000
  FvBaseAddress      = $(FV_RECOVERY_IN_MEM_BASE)
  FvAlignment        = 16
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1
  FvNameGuid         = ea5dbed5-cb15-48db-89a2-e2352829c69a

  APRIORI PEI {
    INF MdeModulePkg/Universal/ReportStatusCodeRouter/Pei/ReportStatusCodeRouterPei.inf
    INF MdeModulePkg/Universal/StatusCodeHandler/Pei/StatusCodeHandlerPei.inf
    INF MdeModulePkg/Universal/PCD/Pei/Pcd.inf
    FILE PEIM = D82C7A0A-0C89-4dab-8A76-2F2B94EC5D01  {
    SECTION PEI_DEPEX = FspBlobs/AbSupportNvRam/AbSupportNvramPei.depex
    SECTION Align = 32 PE32 = FspBlobs/AbSupportNvRam/AbSupportNvramPei.efi
    }
    #Capsule in Memory
    !if $(CAPSULE_ENABLE) == TRUE
    INF MdeModulePkg/Universal/FaultTolerantWritePei/FaultTolerantWritePei.inf
    INF MdeModulePkg/Universal/Variable/Pei/VariablePei.inf
    INF MdeModulePkg/Universal/CapsulePei/CapsulePei.inf
    !endif
  }
  FILE PEIM = D82C7A0A-0C89-4dab-8A76-2F2B94EC5D01 {
    SECTION PEI_DEPEX = FspBlobs/AbSupportNvRam/AbSupportNvramPei.depex
    SECTION Align = 32 PE32 = FspBlobs/AbSupportNvRam/AbSupportNvramPei.efi
  }
  #Capsule in Memory
  !if $(CAPSULE_ENABLE) == TRUE
  INF MdeModulePkg/Universal/CapsulePei/CapsulePei.inf
  INF MdeModulePkg/Universal/CapsulePei/CapsuleX64.inf
  !endif
  #
  # FSP Wrapper
  #
  INF Override/edk2/Fsp2WrapperPkg/FspmWrapperPeim/FspmWrapperPeim.inf
  INF Override/edk2/Fsp2WrapperPkg/FspsWrapperPeim/FspsWrapperPeim.inf
  INF MdeModulePkg/Core/Pei/PeiMain.inf
  INF MdeModulePkg/Core/DxeIplPeim/DxeIpl.inf
  INF MdeModulePkg/Universal/PCD/Pei/Pcd.inf
  INF MdeModulePkg/Universal/ReportStatusCodeRouter/Pei/ReportStatusCodeRouterPei.inf
  INF MdeModulePkg/Universal/StatusCodeHandler/Pei/StatusCodeHandlerPei.inf
  INF MdeModulePkg/Universal/PcatSingleSegmentPciCfg2Pei/PcatSingleSegmentPciCfg2Pei.inf
  INF MdeModulePkg/Universal/FaultTolerantWritePei/FaultTolerantWritePei.inf
  INF MdeModulePkg/Universal/Variable/Pei/VariablePei.inf
  INF UefiCpuPkg/CpuIoPei/CpuIoPei.inf
  FILE SEC = 2e7472a2-d7bf-4f5e-8fe4-bf19247856d0 {
    SECTION PE32 =   $(OUTPUT_DIRECTORY)/$(TARGET)_$(TOOL_CHAIN_TAG)/IA32/SecCore.efi
  }

  #
  # AMD Common
  #
  INF VanGoghCommonPkg/Smm/SmmAccessPei/SmmAccessPei.inf
  INF RuleOverride = FMP_IMAGE_DESC ChachaniBoardPkg/Capsule/SystemFirmwareDescriptor/SystemFirmwareDescriptor.inf

  #
  #
  # Trusted Platform Module
  #
  !if $(FTPM_ENABLE) == TRUE || $(DTPM_ENABLE) == TRUE
    INF Override/edk2/SecurityPkg/Tcg/Tcg2Config/Tcg2ConfigPei.inf
    INF SecurityPkg/Tcg/Tcg2Pei/Tcg2Pei.inf
  !endif
  # Board Specific
  #
  INF Smm/SmmControlPei/SmmControlPei.inf
  INF UefiCpuPkg/Universal/Acpi/S3Resume2Pei/S3Resume2Pei.inf
  INF UefiCpuPkg/PiSmmCommunication/PiSmmCommunicationPei.inf
  INF Universal/PlatformInitPei/PlatformInit.inf

  #
  # AMD Platform override
  #
  INF RuleOverride=RESET_VECTOR Override/edk2/UefiCpuPkg/ResetVector/Vtf0/Vtf0.inf

##
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
##
[FV.FVMAIN_COMPACT]
  FvAlignment        = 16
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1
  FvNameGuid         = 936ffdf6-6fbb-4cb4-80f6-e480f5896785

  FILE FV_IMAGE = 20bc8ac9-94d1-4208-ab28-5d673fd73486 {
    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
      SECTION FV_IMAGE = FVMAIN
    }
  }
  FILE FV_IMAGE = 82DFABE7-CD0E-44D3-AFBE-468221D108C4 {
    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
      SECTION FV_IMAGE = SMM_DRIVER
    }
  }
 # FMP image decriptor
  INF RuleOverride = FMP_IMAGE_DESC ChachaniBoardPkg/Capsule/SystemFirmwareDescriptor/SystemFirmwareDescriptor.inf

!if $(FSPO_BUILD) == TRUE
[FV.FSP-O_PEI]
  BlockSize          = 0x10000
  FvAlignment        = 16
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1
  FvNameGuid         = ea5dbed5-cb15-48db-89a2-e2352829c69a

[FV.FSP-O_DXE]
  BlockSize          = 0x10000
  FvAlignment        = 16
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1
  FvNameGuid         = 36F5174E-1446-480A-80D5-C4501E9C112B
!endif

##
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
##
[FV.FVMAIN]
  BlockSize          = 0x1000
  FvAlignment        = 4K
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1

  APRIORI DXE {
    INF MdeModulePkg/Universal/ReportStatusCodeRouter/RuntimeDxe/ReportStatusCodeRouterRuntimeDxe.inf
    INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
    INF MdeModulePkg/Universal/ReportStatusCodeRouter/Smm/ReportStatusCodeRouterSmm.inf
    INF MdeModulePkg/Universal/StatusCodeHandler/RuntimeDxe/StatusCodeHandlerRuntimeDxe.inf
    INF MdeModulePkg/Universal/StatusCodeHandler/Smm/StatusCodeHandlerSmm.inf
  }
  ##
  #  DXE Phase modules
  ##
  INF MdeModulePkg/Core/Dxe/DxeMain.inf
  INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf

  ##
  #  EDK Core modules
  ##
  INF UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe.inf
  INF UefiCpuPkg/CpuS3DataDxe/CpuS3DataDxe.inf
  INF MdeModulePkg/Universal/ReportStatusCodeRouter/RuntimeDxe/ReportStatusCodeRouterRuntimeDxe.inf
  INF MdeModulePkg/Universal/SectionExtractionDxe/SectionExtractionDxe.inf
  INF MdeModulePkg/Universal/ReportStatusCodeRouter/Smm/ReportStatusCodeRouterSmm.inf
  INF MdeModulePkg/Universal/StatusCodeHandler/RuntimeDxe/StatusCodeHandlerRuntimeDxe.inf
  INF MdeModulePkg/Universal/StatusCodeHandler/Smm/StatusCodeHandlerSmm.inf
  INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf
  INF UefiCpuPkg/CpuDxe/CpuDxe.inf

  INF MdeModulePkg/Universal/Metronome/Metronome.inf
  INF MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer.inf
  INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
  !if $(VARIABLE_EMULATION) == FALSE
    INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableSmmRuntimeDxe.inf
    INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableSmm.inf
  !else
    INF MdeModulePkg/Universal/Variable/EmuRuntimeDxe/EmuVariableRuntimeDxe.inf
  !endif
  INF MdeModulePkg/Universal/FaultTolerantWriteDxe/FaultTolerantWriteSmm.inf
  INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
  INF MdeModulePkg/Universal/MonotonicCounterRuntimeDxe/MonotonicCounterRuntimeDxe.inf
  INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf

  #
  # Platform
  #
  INF  MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
  INF  PcAtChipsetPkg/HpetTimerDxe/HpetTimerDxe.inf

  #
  # ACPI
  #
  INF MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe.inf
  INF MdeModulePkg/Universal/Acpi/S3SaveStateDxe/S3SaveStateDxe.inf
  INF MdeModulePkg/Universal/Acpi/SmmS3SaveState/SmmS3SaveState.inf

  INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf

  #
  # SMM
  #
  !if $(DISPATCH_BUILD) == TRUE
  INF MdeModulePkg/Core/PiSmmCore/PiSmmIpl.inf
  INF MdeModulePkg/Core/PiSmmCore/PiSmmCore.inf
  INF UefiCpuPkg/CpuIo2Smm/CpuIo2Smm.inf
  INF MdeModulePkg/Universal/LockBox/SmmLockBox/SmmLockBox.inf
  INF UefiCpuPkg/PiSmmCommunication/PiSmmCommunicationSmm.inf
  INF VanGoghCommonPkg/Smm/AcpiSmm/AcpiSmmPlatform.inf
  !endif

  #
  # SMBIOS
  #
  INF   MdeModulePkg/Universal/SmbiosDxe/SmbiosDxe.inf

  #
  # PCI
  #
  INF  MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf

  #
  # NVMe
  #
  INF MdeModulePkg/Bus/Pci/NvmExpressDxe/NvmExpressDxe.inf

  #
  # USB
  #
  INF MdeModulePkg/Bus/Usb/UsbBusDxe/UsbBusDxe.inf
  INF MdeModulePkg/Bus/Usb/UsbMassStorageDxe/UsbMassStorageDxe.inf
  INF MdeModulePkg/Bus/Usb/UsbKbDxe/UsbKbDxe.inf
  INF MdeModulePkg/Bus/Pci/XhciDxe/XhciDxe.inf


  #
  # Serial Port console redirection enabling
  #
  INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
  INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf

  INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf
  INF MdeModulePkg/Universal/DisplayEngineDxe/DisplayEngineDxe.inf
  INF MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe.inf
  INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf

  INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf
  INF MdeModulePkg/Universal/PrintDxe/PrintDxe.inf
  INF MdeModulePkg/Universal/Console/TerminalDxe/TerminalDxe.inf

  #
  # File System Modules
  #
  INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
  INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
  INF FatPkg/EnhancedFatDxe/Fat.inf

  #
  # FP
  #
  INF MdeModulePkg/Universal/Acpi/FirmwarePerformanceDataTableDxe/FirmwarePerformanceDxe.inf
  INF MdeModulePkg/Universal/Acpi/FirmwarePerformanceDataTableSmm/FirmwarePerformanceSmm.inf

  #
  # UEFI Shell
  #
  INF ShellPkg/Application/Shell/Shell.inf
  INF ShellPkg/DynamicCommand/DpDynamicCommand/DpDynamicCommand.inf
    INF MdeModulePkg/Universal/Acpi/BootGraphicsResourceTableDxe/BootGraphicsResourceTableDxe.inf

  !if $(CAPSULE_ENABLE) == TRUE
    INF  MdeModulePkg/Universal/EsrtDxe/EsrtDxe.inf
    INF  MdeModulePkg/Universal/EsrtFmpDxe/EsrtFmpDxe.inf
    INF  SignedCapsulePkg/Universal/SystemFirmwareUpdate/SystemFirmwareReportDxe.inf
  !endif

  #
  INF Override/edk2/Fsp2WrapperPkg/FspsMultiPhaseSiInitDxe/FspsMultiPhaseSiInitDxe.inf
  # AMD Common
  #
  INF VanGoghCommonPkg/FvbServices/PlatformSmmSpi.inf
  INF VanGoghCommonPkg/FlashUpdate/FlashUpdateSmmRuntimeDxe.inf
  INF VanGoghCommonPkg/FlashUpdate/FlashUpdateSmm.inf
  INF UefiCpuPkg/PiSmmCpuDxeSmm/PiSmmCpuDxeSmm.inf
  INF Override/edk2/PcAtChipsetPkg/PcatRealTimeClockRuntimeDxe/PcatRealTimeClockRuntimeDxe.inf

  #
  # Board Specific
  #
  INF Universal/FchSpi/FchSpiRuntimeDxe.inf
  INF Universal/FchSpi/FchSpiSmm.inf
  INF Universal/PlatformSmbiosDxe/PlatformSmbiosDxe.inf
  INF Universal/AcpiPlatformDxe/AcpiPlatformDxe.inf
  INF RuleOverride = ACPITABLE ChachaniBoardPkg/Acpi/AcpiTables/AcpiTables.inf
  INF Override/edk2/MdeModulePkg/Bus/Pci/PciHostBridgeDxe/PciHostBridgeDxe.inf
  INF ChachaniBoardPkg/PciPlatform/PciPlatform.inf
  #
  # FSP Wrapper
  #
  INF Override/edk2/Fsp2WrapperPkg/FspWrapperNotifyDxe/FspWrapperNotifyDxe.inf
  !if $(FTPM_ENABLE) == TRUE
    INF RuleOverride = DRIVER_ACPITABLE Override/edk2/SecurityPkg/Tcg/AmdFtpm/FtpmTcg2Smm/Tcg2Smm.inf
  !endif
  !if $(DTPM_ENABLE) == TRUE
    INF RuleOverride = DRIVER_ACPITABLE Override/edk2/SecurityPkg/Tcg/Tcg2Smm/Tcg2Smm.inf
  !endif
  !if $(FTPM_ENABLE) == TRUE || $(DTPM_ENABLE) == TRUE
    INF SecurityPkg/Tcg/Tcg2Dxe/Tcg2Dxe.inf
    INF SecurityPkg/Tcg/Tcg2Config/Tcg2ConfigDxe.inf
    INF SecurityPkg/Tcg/MemoryOverwriteControl/TcgMor.inf
    INF SecurityPkg/Tcg/MemoryOverwriteRequestControlLock/TcgMorLockSmm.inf
  !endif
  # VBIOS and GOP
  # FILE FREEFORM =  8dfae5d4-b50e-4c10-96e6-f2c266cacbb6 {
  #   SECTION RAW =Firmware/AerithGenericVbios.bin
  # }
  FILE FREEFORM =  E7D31EB4-90F3-4A14-8A28-48D04742F8E1 {
    SECTION RAW =Firmwares/AmdSjGenericVbios.bin
  }
  FILE DRIVER = A8DAFB9B-3529-4e87-8584-ECDB6A5B78B6 {
    SECTION PE32 =Firmwares/AmdGopx64.efi
    SECTION UI = "AmdVNDxeGOPx64"
  }

  INF MdeModulePkg/Application/UiApp/UiApp.inf
  INF MdeModulePkg/Application/BootManagerMenuApp/BootManagerMenuApp.inf
  !if $(DISPATCH_BUILD) == FALSE
  INF Override/edk2/Fsp2WrapperPkg/PrepareForFspSmmDxe/PrepareForFspSmmDxe.inf
  !endif
  INF SecurityPkg/RandomNumberGenerator/RngDxe/RngDxe.inf
  INF AmdPlatformPkg/Universal/LogoDxe/S3LogoDxe.inf
##
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
##
!if $(CAPSULE_ENABLE) == TRUE
  [FV.CapsuleDispatchFv]
    FvAlignment        = 16
    ERASE_POLARITY     = 1
    MEMORY_MAPPED      = TRUE
    STICKY_WRITE       = TRUE
    LOCK_CAP           = TRUE
    LOCK_STATUS        = TRUE
    WRITE_DISABLED_CAP = TRUE
    WRITE_ENABLED_CAP  = TRUE
    WRITE_STATUS       = TRUE
    WRITE_LOCK_CAP     = TRUE
    WRITE_LOCK_STATUS  = TRUE
    READ_DISABLED_CAP  = TRUE
    READ_ENABLED_CAP   = TRUE
    READ_STATUS        = TRUE
    READ_LOCK_CAP      = TRUE
    READ_LOCK_STATUS   = TRUE

  INF Override/edk2/SignedCapsulePkg/Universal/SystemFirmwareUpdate/SystemFirmwareUpdateDxe.inf

!endif

[FV.SMM_DRIVER]
  FvAlignment        = 16
  MEMORY_MAPPED      = TRUE
  LOCK_CAP           = TRUE
  LOCK_STATUS        = TRUE
  WRITE_LOCK_CAP     = TRUE
  WRITE_LOCK_STATUS  = TRUE
  WRITE_ENABLED_CAP  = TRUE
  WRITE_DISABLED_CAP = TRUE
  WRITE_STATUS       = TRUE
  STICKY_WRITE       = TRUE
  READ_LOCK_CAP      = TRUE
  READ_LOCK_STATUS   = TRUE
  READ_ENABLED_CAP   = TRUE
  READ_DISABLED_CAP  = TRUE
  READ_STATUS        = TRUE
  ERASE_POLARITY     = 1
  FvNameGuid         = 132A6474-A971-47B6-8BEB-A39B9CF43A46
  # Keep this as the first driver to prepare environment for other drivers.
  !if $(DISPATCH_BUILD) == FALSE
  INF Override/edk2/Fsp2WrapperPkg/PrepareForFspSmmDxeFsp/PrepareForFspSmmDxeFsp.inf
  !if $(FTPM_ENABLE) == TRUE
    INF RuleOverride = DRIVER_ACPITABLE Override/edk2/SecurityPkg/Tcg/AmdFtpm/FtpmTcg2Smm/Tcg2Smm.inf
  !endif
  !if $(FTPM_ENABLE) == TRUE || $(DTPM_ENABLE) == TRUE
    INF SecurityPkg/Tcg/MemoryOverwriteRequestControlLock/TcgMorLockSmm.inf
  !endif
  !endif

##
#
# Rules are use with the [FV] section's module INF type to define
# how an FFS file is created for a given INF file. The following Rule are the default
# rules for the different module type. User can add the customized rules to define the
# content of the FFS file.
#
##
[Rule.Common.USER_DEFINED.RESET_VECTOR]
  FILE RAW = $(NAMED_GUID) {
    RAW BIN   Align = 16   |.bin
  }

[Rule.Common.DXE_DRIVER.BINARY]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       |.depex
    PE32      PE32     Align = Auto      |.efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.USER_DEFINED.ACPITABLE]
  FILE FREEFORM = $(NAMED_GUID) {
    RAW ACPI Optional    |.acpi
    RAW ASL  Optional    |.aml
  }

[Rule.Common.DXE_SMM_DRIVER.DRIVER_ACPITABLE]
  FILE SMM = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
    RAW ACPI  Optional                |.acpi
    RAW ASL   Optional                |.aml
  }

[Rule.Common.PEI_CORE]
  FILE PEI_CORE = $(NAMED_GUID)            {
    PE32       PE32     Align = Auto       $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.PE32_PEIM]
  FILE PEIM = $(NAMED_GUID) {
    PEI_DEPEX PEI_DEPEX Optional        $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32       PE32      Align = Auto     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.DXE_DRIVER.ACPITABLE]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
    RAW ACPI  Optional                |.acpi
    RAW ASL   Optional                |.aml
  }

[Rule.Common.USER_DEFINED.BINARY]
  FILE RAW = $(NAMED_GUID) {
    RAW BIN   Optional                |.bin
    RAW BIN   Optional                |.com
  }

[Rule.Common.RT_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      $(INF_OUTPUT)/$(MODULE_NAME).depex
        PE32     PE32                    $(INF_OUTPUT)/$(MODULE_NAME).efi
        UI       STRING="$(MODULE_NAME)" Optional
        VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.PE32_PEIM.LzmaCompress]
  FILE PEIM = $(NAMED_GUID) {
     PEI_DEPEX PEI_DEPEX Optional        $(INF_OUTPUT)/$(MODULE_NAME).depex
     GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF {
       PE32       PE32   $(INF_OUTPUT)/$(MODULE_NAME).efi
       UI       STRING="$(MODULE_NAME)" Optional
       VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
     }
  }

[Rule.Common.DXE_CORE]
  FILE DXE_CORE = $(NAMED_GUID) {
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.DXE_RUNTIME_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.UEFI_APPLICATION.BINARY]
  FILE APPLICATION = $(NAMED_GUID) {
    PE32     PE32                    |.efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.DXE_RUNTIME_DRIVER.ACPITABLE]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
    RAW ACPI  Optional                |.acpi
    RAW ASL   Optional                |.aml
  }

[Rule.Common.SEC]
  FILE SEC = $(NAMED_GUID) RELOCS_STRIPPED {
    PE32  PE32    Align = Auto       $(INF_OUTPUT)/$(MODULE_NAME).efi
  }

[Rule.Common.BS_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      $(INF_OUTPUT)/$(MODULE_NAME).depex
        PE32     PE32                    $(INF_OUTPUT)/$(MODULE_NAME).efi
        UI       STRING="$(MODULE_NAME)" Optional
        VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.PEIM.BINARY]
  FILE PEIM = $(NAMED_GUID) {
    PEI_DEPEX    PEI_DEPEX Optional      |.depex
    PE32     PE32      Align = Auto      |.efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.UEFI_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.SMM_CORE]
  FILE SMM_CORE = $(NAMED_GUID) {
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.ACPITABLE]
  FILE FREEFORM = $(NAMED_GUID) {
    RAW ACPI Optional              |.acpi
    RAW ASL  Optional              |.aml
  }

[Rule.Common.DXE_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.DXE_SMM_DRIVER]
  FILE SMM = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.UEFI_APPLICATION]
  FILE APPLICATION = $(NAMED_GUID) {
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.USER_DEFINED.OptionRom]
  FILE RAW = $(NAMED_GUID) {
    RAW BIN Optional               |.com
  }

[Rule.Common.PEIM]
  FILE PEIM = $(NAMED_GUID) {
    PEI_DEPEX PEI_DEPEX Optional        $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32        PE32    Align = Auto      $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.UEFI_DRIVER.BINARY]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32     PE32                        |.efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }

[Rule.Common.PEIM.LzmaCompress]
  FILE PEIM = $(NAMED_GUID) {
    PEI_DEPEX PEI_DEPEX Optional        $(INF_OUTPUT)/$(MODULE_NAME).depex
    GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF {
      PE32       PE32   $(INF_OUTPUT)/$(MODULE_NAME).efi
      UI       STRING="$(MODULE_NAME)" Optional
      VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
    }
  }

[Rule.Common.PEIM.FMP_IMAGE_DESC]
  FILE PEIM = $(NAMED_GUID) {
    RAW BIN                  |.acpi
    PEI_DEPEX PEI_DEPEX Optional        $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32    Align=4K          $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI       STRING="$(MODULE_NAME)" Optional
    VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
  }


[Rule.Common.DXE_DRIVER.DRIVER_ACPITABLE]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX DXE_DEPEX Optional       $(INF_OUTPUT)/$(MODULE_NAME).depex
    PE32      PE32                     $(INF_OUTPUT)/$(MODULE_NAME).efi
    UI        STRING="$(MODULE_NAME)" Optional
    VERSION   STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
    RAW ACPI  Optional                |.acpi
    RAW ASL   Optional                |.aml
  }
[Rule.Common.USER_DEFINED.FSPHEADER]
  FILE RAW = $(NAMED_GUID)               {
     RAW BIN                  |.acpi        # Borrow ASLC type from ACPI.
  }
