// /** @file
// Acpi Fadt50.aslc
//
// Copyright (C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.<BR>
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//
// **/

#include <Fadt.h>

EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE FADT = {
  {                                   // EFI_ACPI_DESCRIPTION_HEADER
    EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,    // UINT32, Signature 'FACP'
    sizeof (EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE),     // UINT32, Legth
    EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_REVISION,     // UINT8, Revision
    0,                                                      // UINT8, to make sum of entire table == 0
    {EFI_ACPI_OEM_ID},                  // UINT8[6], OEM identification
    EFI_ACPI_OEM_TABLE_ID,            // UINT64, OEM table identification
    EFI_ACPI_OEM_REVISION,            // UINT32, OEM revision number
    EFI_ACPI_CREATOR_ID,              // UINT32, ASL compiler vendor ID
    EFI_ACPI_CREATOR_REVISION,        // UINT32, ASL compiler revision number
  },
  0,                                  // UINT32, Physical addesss of FACS
  0,                                  // UINT32, Physical address of DSDT
  RESERVED,                           // Reserved
  EFI_ACPI_5_0_PM_PROFILE_MOBILE,    // Preferred Power Management Profile

  SCI_INT_VECTOR,                     // UINT16, System vector of SCI interrupt
  SMI_CMD_IO_PORT,                    // UINT32, Port address of SMI command port
  ACPI_ENABLE,                        // Value to write to port smi_cmd to enable ACPI
  ACPI_DISABLE,                       // Value to write to port smi_cmd to disable ACPI
  0,                                  // Value to write to SMI CMD port to enter the S4BIOS state
  0,                                  // PSTATE_CNT,

  PM1a_EVT_BLK,                       // Port address of Power Mgt 1a Event Reg Blk
  PM1b_EVT_BLK,                       // Port address of Power Mgt 1b Event Reg Blk
  PM1a_CNT_BLK,                       // Port address of Power Mgt 1a Ctrl Reg Blk
  PM1b_CNT_BLK,                       // Port address of Power Mgt 1b Ctrl Reg Blk
  PM2_CNT_BLK,                        // Port address of Power Mgt 2  Ctrl Reg Blk
  PM_TMR_BLK,                         // Port address of Power Mgt Timer Ctrl Reg Blk
  GPE0_BLK,                           // Port addr of General Purpose Event 0 Reg Blk
  GPE1_BLK,                           // Port addr of General Purpose Event 1 Reg Blk
  PM1_EVT_LEN,                        // Byte Length of ports at pm1X_evt_blk
  PM1_CNT_LEN,                        // Byte Length of ports at pm1X_cnt_blk
  PM2_CNT_LEN,                        // Byte Length of ports at pm2_cnt_blk
  PM_TM_LEN,                          // Byte Length of ports at pm_tm_blk
  GPE0_BLK_LEN,                       // Byte Length of ports at gpe0_blk
  GPE1_BLK_LEN,                       // Byte Length of ports at gpe1_blk
  GPE1_BASE,                          // Offset in gpe model where gpe1 events start
  0,                                  // CST_CNT,
  P_LVL2_LAT,                         // Worst case HW latency to enter/exit C2 state
  P_LVL3_LAT,                         // Worst case HW latency to enter/exit C3 state
  FLUSH_SIZE,                         // Size of area read to flush caches
  FLUSH_STRIDE,                       // Stride used in flushing caches
  DUTY_OFFSET,                        // Bit location of duty cycle field in p_cnt reg
  DUTY_WIDTH,                         // Bit width of duty cycle field in p_cnt reg
  DAY_ALRM,                           // Index to day-of-month alarm in RTC CMOS RAM
  MON_ALRM,                           // Index to month-of-year alarm in RTC CMOS RAM
  CENTURY,                            // Index to century in RTC CMOS RAM
  0,                                  // IAPC_Boot_Arch
  RESERVED,                           // Reserved
  FLAG,                               // UINT32, 0x0000C5AD

  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE ResetReg
    EFI_ACPI_5_0_SYSTEM_IO,
    0x8,
    0,
    EFI_ACPI_5_0_BYTE,
    0xCF9
  },
  0x06,                               // UINT8, ResetValue
  {0x00,0x00,0x00},                   // Reserved2[3]
  0,                                  // UINT64, XFirmwareCtrl
  0,                                  // UINT64, XDsdt
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPm1aEvtBlk
    EFI_ACPI_5_0_SYSTEM_IO,
    (PM1_EVT_LEN * 8),
    0,
    EFI_ACPI_5_0_DWORD,
    PM1a_EVT_BLK
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPm1bEvtBlk
    0,
    0,
    0,
    0,
    0
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPm1aCntBlk
    EFI_ACPI_5_0_SYSTEM_IO,
    (PM1_CNT_LEN * 8),
    0,
    EFI_ACPI_5_0_WORD,
    PM1a_CNT_BLK
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPm1bCntBlk
    0,
    0,
    0,
    0,
    0
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPm2CntBlk
    EFI_ACPI_5_0_SYSTEM_IO,
    (PM2_CNT_LEN * 8),
    0,
    EFI_ACPI_5_0_BYTE,
    PM2_CNT_BLK
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XPmTmrBlk
    EFI_ACPI_5_0_SYSTEM_IO,
    (PM_TM_LEN * 8),
    0,
    EFI_ACPI_5_0_DWORD,
    PM_TMR_BLK
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XGpe0Blk
    EFI_ACPI_5_0_SYSTEM_IO,
    (GPE0_BLK_LEN * 8),
    0,
    EFI_ACPI_5_0_QWORD,
    GPE0_BLK
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE XGpe1Blk
    0,
    0,
    0,
    0,
    0
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE SleepControlReg
    0,
    0,
    0,
    0,
    0
  },
  {                                   // EFI_ACPI_5_0_GENERIC_ADDRESS_STRUCTURE SleepStatusReg
    0,
    0,
    0,
    0,
    0
  }
};

VOID*
ReferenceAcpiTable (
  VOID
  )

{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the exeutable
  //
  return (VOID*)&FADT;
}
