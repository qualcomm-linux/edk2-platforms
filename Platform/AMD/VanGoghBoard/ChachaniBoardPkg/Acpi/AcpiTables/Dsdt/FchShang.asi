// /** @file
// Acpi FchShang.asl
//
// Copyright (C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.<BR>
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//
// **/
Name (TSOS, 0x75)

If(CondRefOf(\_OSI))
{
  If(\_OSI("Windows 2009"))
  {
    Store(0x50, TSOS)
  }
  If(\_OSI("Windows 2015"))
  {
    Store(0x70, TSOS)
  }
}

Scope(\_SB) {
OperationRegion(ECMC, SystemIo, 0x72, 0x02)
Field(ECMC, AnyAcc, NoLock, Preserve)
{
  ECMI, 8,
  ECMD, 8,
}
IndexField(ECMI, ECMD, ByteAcc, NoLock, Preserve) {
  Offset (0x08),
  FRTB, 32,
}
OperationRegion(FRTP, SystemMemory, FRTB, 0x100)
Field(FRTP, AnyAcc, NoLock, Preserve)
{
  PEBA, 32,
  Offset (0x04),
  , 5,
  IC0E, 1,   //I2C0, 5
  IC1E, 1,   //I2C1, 6
  IC2E, 1,   //I2C2, 7
  IC3E, 1,   //I2C3, 8
  IC4E, 1,   //I2C3, 9
  IC5E, 1,   //I2C3, 10
  UT0E, 1,   //UART0, 11
  UT1E, 1,   //UART1, 12
  , 1,   // 13
  , 1,   //, 14
  ST_E, 1,   //SATA, 15
  UT2E, 1,   //UART2, 16
  , 1,
  EMMD, 2,   //18-19, EMMC Driver type, 0:AMD eMMC Driver (AMDI0040) 1:MS SD Driver (PNP0D40) 2:0:MS eMMC Driver (AMDI0040)
  UT4E, 1,   //UART4, 20
  , 2,
  XHCE, 1,   //XCHI, 23
  , 1,   //24
  , 1,
  UT3E, 1,   //UART3, 26
  ESPI, 1,   //ESPI  27
  EMME, 1,   //EMMC  28
  Offset (0x08),
  PCEF, 1,   // Post Code Enable Flag
  , 4,
  IC0D, 1,   //I2C0, 5
  IC1D, 1,
  IC2D, 1,
  IC3D, 1,   //I2C3, 8
  IC4D, 1,   //I2C3, 9
  IC5D, 1,   //I2C3, 10
  UT0D, 1,   //UART0, 11
  UT1D, 1,   //UART1, 12
  , 1,   //, 13
  , 1,   //, 14
  ST_D, 1,   //SATA, 15
  UT2D, 1,   //UART2, 16
  , 1,
  EHCD, 1,   //EHCI, 18
  , 1,
  UT4D, 1,   //UART4, 20
  , 2,
  XHCD, 1,   //XCHI, 23
  SD_D, 1,   //SD,   24
  , 1,
  UT3D, 1,   //UART1, 26
  , 1,
  EMD3, 1,   //EMMC D3  28
  , 2,
  S03D, 1,   //S0I3 flag, 31
  Offset (0x0C),
  FW00, 16,
  FW01, 32,
  FW02, 16,
  FW03, 32,
  SDS0, 8, //SataDevSlpPort0S5Pin
  SDS1, 8, //SataDevSlpPort1S5Pin
  CZFG, 1, //Carrizo Serials
  Offset (0x20),
  SD10, 32,
  EH10, 32,
  XH10, 32,
  STBA, 32,
}
OperationRegion(FCFG, SystemMemory, PEBA, 0x01000000)
Field(FCFG, DwordAcc, NoLock, Preserve)
{
  Offset(0x000A3044),
    IPDE,  32, //IO Port Decode Enable
  Offset(0x000A3048),
    IMPE,  32, //IO Memory Port decode Enable
  Offset(0x000A3078),
    , 2,
    LDQ0,  1, //
  Offset(0x000A30CB),
    ,  7,
    AUSS,  1, //AutoSizeStart
}
OperationRegion(IOMX, SystemMemory, 0xFED80D00, 0x100)
Field(IOMX, AnyAcc, NoLock, Preserve)
{
  Offset (0x15),
  IM15, 8,   //
  Offset (0x16),
  IM16, 8,   //
  Offset (0x1F),
  IM1F, 8,   //
  Offset (0x20),
  IM20, 8,   //
  Offset (0x44),
  IM44, 8,   //
  Offset (0x46),
  IM46, 8,   //
  Offset (0x4A),
  IM4A, 8,   //
  Offset (0x4B),
  IM4B, 8,   //
  Offset (0x57),
  IM57, 8,   //
  Offset (0x58),
  IM58, 8,   //
  Offset (0x68),
  IM68, 8,   //
  Offset (0x69),
  IM69, 8,   //
  Offset (0x6A),
  IM6A, 8,   //
  Offset (0x6B),
  IM6B, 8,   //
  Offset (0x6D),
  IM6D, 8,   //
}
OperationRegion(FACR, SystemMemory, 0xFED81E00, 0x100)  //Fch AoaC Register
Field(FACR, AnyAcc, NoLock, Preserve)
{
  Offset (0x80),
      ,28,
  RD28, 1,   //Request of Device 28, MAP
      , 1,
  RQTY, 1,     //ReQuestTYpe
  Offset (0x84),
      ,28,
  SD28, 1,   //Status of Device 28, MAP
      , 1,
  Offset (0xA0), //AOACx0000A0 [PwrGood Control] (PwrGoodCtl)
  PG1A, 1,
}
OperationRegion(EMMX, SystemMemory, 0xFEDD5800, 0x130)
Field(EMMX, AnyAcc, NoLock, Preserve)
{
  Offset (0xD0),
  ,  17,
  FC18, 1,   //Force1.8v
  FC33, 1,   //Force3.3v
  , 7,   //
  CD_T, 1, //CD_TIE, 26
  WP_T, 1, //WP_TIE, 27
}
OperationRegion(EMMB, SystemMemory, 0xFEDD5800, 0x130)
Field(EMMB, AnyAcc, NoLock, Preserve)
{
  Offset (0xA4),
  E0A4,  32,
  Offset (0xA8),
  E0A8,  32,
  Offset (0xB0),
  E0B0,  32,
  Offset (0xD0),
  E0D0,  32,
  Offset (0x116),
  E116,  32,
}
Name (SVBF, Buffer (0x100) {0})
CreateDWordField(SVBF, 0x000, S0A4)
CreateDWordField(SVBF, 0x004, S0A8)
CreateDWordField(SVBF, 0x008, S0B0)
CreateDWordField(SVBF, 0x00C, S0D0)
CreateDWordField(SVBF, 0x010, S116)
Method(SECR,0, Serialized)  //Save Emmc Configure Register
{
//  store (E0A4,  S0A4)
//  store (E0A8,  S0A8)
//  store (E0B0,  S0B0)
//  store (E0D0,  S0D0)
  store (E116,  S116)
  //Do hareware save first
  store (zero, RQTY)
  store (one, RD28)
  store (SD28, Local0)
  while (Local0) {store (SD28, Local0)}
}
Method(RECR,0, Serialized)  //Restore Emmc Configure Register
{
//  store (S0A4,  E0A4)
//  store (S0A8,  E0A8)
//  store (S0B0,  E0B0)
//  store (S0D0,  E0D0)
  store (S116,  E116)
}

OperationRegion(LUIE, SystemMemory, 0xFEDC0020, 0x4) //Legacy Uart Io Enable
Field(LUIE, AnyAcc, NoLock, Preserve)
{
  IER0, 1,   //2E8
  IER1, 1,   //2F8
  IER2, 1,   //3E8
  IER3, 1,   //3F8
  UOL0, 1,   //UART0 on legacy
  UOL1, 1,   //UART1 on legacy
  UOL2, 1,   //UART2 on legacy
  UOL3, 1,   //UART3 on legacy
  WUR0, 2,   //
  WUR1, 2,   //
  WUR2, 2,   //
  WUR3, 2,   //
}
Method(FRUI,2, Serialized)  //Fch Return Uart Interrupt
{
  if (LEqual(Arg0, 0)) {store (IUA0, Arg1)}
  if (LEqual(Arg0, 1)) {store (IUA1, Arg1)}
  if (LEqual(Arg0, 2)) {store (IUA2, Arg1)}
  if (LEqual(Arg0, 3)) {store (IUA3, Arg1)}
}

Method(SRAD,2, Serialized)  //SoftResetAoacDevice, Arg0:Device ID, Arg1:reset period in micro seconds
{
  ShiftLeft(Arg0, 1, Local0)
  Add (Local0, 0xfed81e40, Local0)
  OperationRegion( ADCR, SystemMemory, Local0, 0x02)
  Field( ADCR, ByteAcc, NoLock, Preserve) { //AoacD3ControlRegister
    ADTD, 2,
    ADPS, 1,
    ADPD, 1,
    ADSO, 1,
    ADSC, 1,
    ADSR, 1,
    ADIS, 1,
    ADDS, 3,
  }
  store (one, ADIS)       // IsSwControl = 1
  store (zero, ADSR)      // SwRstB = 0
  stall (Arg1)
  store (one, ADSR)       // SwRstB = 1
  store (zero, ADIS)      // IsSwControl = 0
  stall (Arg1)
}
Method(DSAD,2, Serialized)  //DxSequenceAoacDevice, Arg0:Device ID, Arg1:3=D3, 0=D0
{
  ShiftLeft(Arg0, 1, Local0)
  Add (Local0, 0xfed81e40, Local0)
  OperationRegion( ADCR, SystemMemory, Local0, 0x02)
  Field( ADCR, ByteAcc, NoLock, Preserve) { //AoacD3ControlRegister
    ADTD, 2,
    ADPS, 1,
    ADPD, 1,
    ADSO, 1,
    ADSC, 1,
    ADSR, 1,
    ADIS, 1,
    ADDS, 3,
  }
  if (LNotEqual(Arg0, ADTD)) {
   if (LEqual(Arg1, 0)) {
    //D0
    store(0x00, ADTD)
    store(one, ADPD)
    store(ADDS, Local0)
    while (LNotEqual(Local0,0x7)) {store(ADDS, Local0)}
   }
   if (LEqual(Arg1, 3)) {
    //D3
    store(zero, ADPD)
    store(ADDS, Local0)
    while (LNotEqual(Local0,0x0)) {store(ADDS, Local0)}
    store(0x03, ADTD)
   }
  }
}
Method(HSAD,2, Serialized)  //Hardware dx Sequence Aoac Device, Arg0:Device ID, Arg1:3=D3, 0=D0
{
  ShiftLeft(1, Arg0, Local3) //caculate bit map location
  ShiftLeft(Arg0, 1, Local0) //Caculate device register location
  Add (Local0, 0xfed81e40, Local0)
  OperationRegion( ADCR, SystemMemory, Local0, 0x02)
  Field( ADCR, ByteAcc, NoLock, Preserve) { //AoacD3ControlRegister
    ADTD, 2,
    ADPS, 1,
    ADPD, 1,
    ADSO, 1,
    ADSC, 1,
    ADSR, 1,
    ADIS, 1,
    ADDS, 3,
  }
  if (LNotEqual(Arg1, ADTD)) {
   if (LEqual(Arg1, 0)) {
    store (One, PG1A)  //power up
    //D0
    store(0x00, ADTD)
    store(one, ADPD)
    store(ADDS, Local0)
    while (LNotEqual(Local0,0x7)) {store(ADDS, Local0)}
    //Do hareware restore now
    // Set RequestType to restore
    store (one, RQTY)
    store (one, RD28)
    // Wait for restore complete
    store (SD28, Local0)
    while (LNot(Local0)) {store (SD28, Local0)}
   }
   if (LEqual(Arg1, 3)) {
    //Do hareware save first
    store (zero, RQTY)
    store (one, RD28)
    store (SD28, Local0)
    while (Local0) {store (SD28, Local0)}
    //D3
    store(zero, ADPD)
    store(ADDS, Local0)
    while (LNotEqual(Local0,0x0)) {store(ADDS, Local0)}
    store(0x03, ADTD)
    store (Zero, PG1A)  //power down
   }
  }
}
OperationRegion(FPIC, SystemIo, 0xc00, 0x02)//Fch Pci Interrupt Connector
Field(ECMC, AnyAcc, NoLock, Preserve)
{
  FPII, 8,
  FPID, 8,
}
IndexField(FPII, FPID, ByteAcc, NoLock, Preserve) {
  Offset (0xF4),      //Interrupt for UArt0
  IUA0, 8,
  Offset (0xF5),
  IUA1, 8,
  Offset (0xF8),
  IUA2, 8,
  Offset (0xF9),
  IUA3, 8,
}
  Device(GPIO) {
    Name (_HID, "AMDI0030")
    Name (_CID, "AMDI0030")
    Name(_UID, 0)

    Method (_CRS, 0x0, NotSerialized) {
      Name (RBUF, ResourceTemplate () {
        //
        // Interrupt resource. In this example, banks 0 & 1 share the same
        // interrupt to the parent controller and similarly banks 2 & 3.
        //
        // N.B. The definition below is chosen for an arbitrary
        //      test platform. It needs to be changed to reflect the hardware
        //      configuration of the actual platform
        //
        Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {7}

        //
        // Memory resource. The definition below is chosen for an arbitrary
        // test platform. It needs to be changed to reflect the hardware
        // configuration of the actual platform.
        //
        Memory32Fixed(ReadWrite, 0xFED81500, 0x400)
      })

      Return (RBUF)
    }

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          Return (0x0F)
        } Else {
          Return (0x00)
        }
    }
  } // End Device GPIO


  Device(FUR0) {
    Name(_HID,"AMDI0020")            // UART Hardware Device ID
    Name(_UID,0x0)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {3}
      Memory32Fixed(ReadWrite, 0xFEDC9000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDC7000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(UT0E, one)) {
            if (IER0) {Return (0)}
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
  } // End Device FUR0

  Device(FUR1) {
    Name(_HID,"AMDI0020")            // UART Hardware Device ID
    Name(_UID,0x1)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {4}
      Memory32Fixed(ReadWrite, 0xFEDCA000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDC8000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(UT1E, one)) {
            if (UOL1) {Return (0)}
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
  } // End Device FUR1

  Device(FUR2) {
    Name(_HID,"AMDI0020")            // UART Hardware Device ID
    Name(_UID,0x2)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {3}
      Memory32Fixed(ReadWrite, 0xFEDCE000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDCC000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(UT2E, one)) {
            if (UOL2) {Return (0)}
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
  } // End Device FUR2

  Device(FUR3) {
    Name(_HID,"AMDI0020")            // UART Hardware Device ID
    Name(_UID,0x3)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {4}
      Memory32Fixed(ReadWrite, 0xFEDCF000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDCD000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(UT3E, one)) {
            if (UOL3) {Return (0)}
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
  } // End Device FUR3

  Device(FUR4) {
    Name(_HID,"AMDI0020")            // UART Hardware Device ID
    Name(_UID,0x4)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {15}  // UART4 INTR to replace I2C5
      Memory32Fixed(ReadWrite, 0xFEDD1000, 0x1000)
      Memory32Fixed(ReadWrite, 0xFEDD0000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(UT4E, one)) {
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
  } // End Device FUR4

  Device(I2CA) {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x0)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {10}
      Memory32Fixed(ReadWrite, 0xFEDC2000, 0x1000)
    })

    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC0E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (5, 200)}
  } // End Device I2CA

  Device(I2CB)
  {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x1)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {11}
      Memory32Fixed(ReadWrite, 0xFEDC3000, 0x1000)
    })
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC1E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (6, 200)}
  } // End Device I2CB

  Device(I2CC) {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x2)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {4}
      Memory32Fixed(ReadWrite, 0xFEDC4000, 0x1000)
    })
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC2E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (7, 200)}
  } // End Device I2CC

  Device(I2CD) {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x3)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {6}
      Memory32Fixed(ReadWrite, 0xFEDC5000, 0x1000)
    })
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC3E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (8, 200)}
  } // End Device I2CD

  Device(I2CE) {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x4)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {14}
      Memory32Fixed(ReadWrite, 0xFEDC6000, 0x1000)
    })
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC4E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (9, 200)}
  } // End Device I2CE

  Device(I2CF) {
    Name(_HID,"AMDI0010")            // Hardware Device ID
    Name(_UID,0x5)
    Name(_CRS, ResourceTemplate() {
      IRQ(Edge, ActiveHigh, Exclusive) {15}
      Memory32Fixed(ReadWrite, 0xFEDCB000, 0x1000)
    })
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (LEqual(IC5E, one)) { Return (0x0F)}
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }

    Method(RSET,0) { SRAD (10, 200)}
  } // End Device I2CF

    Method(EPIN, 0, NotSerialized) {  //eMMC Pin Configure
      //clear all LPC claim
      store (zero, IPDE)
      store (zero, IMPE)
      //switch all pins to EMMC from LPC
      store (one, IM15)
      store (one, IM16)
      store (one, IM20)
      store (one, IM44)
      store (one, IM46)
      store (one, IM68)
      store (one, IM69)
      store (one, IM6A)
      store (one, IM6B)
      store (one, IM4A)
      store (one, IM58)
      store (one, IM4B)
      store (one, IM57)
      store (one, IM6D)
      store (one, IM1F)
      SECR () // Save Emmc Configure Register
    }

    Name(NCRS, ResourceTemplate() {
      Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {5}
      Memory32Fixed(ReadWrite, 0xFEDD5000, 0x1000)
    })
    Name(DCRS, ResourceTemplate() {
      Interrupt(ResourceConsumer, Level, ActiveLow, Shared, , , ) {5}
      Memory32Fixed(ReadWrite, 0xFEDD5000, 0x1000)
//      GpioInt (Level, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000, "\\_SB.GPIO", 0x00, ResourceConsumer, , ) {68}    // AGPIO68 for SD_CD
      GpioInt(Edge, ActiveBoth, SharedAndWake, PullUp, 3000, "\\_SB.GPIO", ,) {68}
      Gpioio(Shared, PullUp, 0, 0, , "\\_SB.GPIO", ,) {68}

    })

    Name(AHID,"AMDI0040")            // Hardware Device ID
    Name(ACID,"AMDI0040")            // Hardware Device ID
    Name(SHID,EISAID ("PNP0D40"))  //SD device
    Name(SCID, "PCI\\CC_080501")      //  _Reduce_ASL_Compiler_Warning_    Note double \\, i.e. escape the backslash
  Device(EMM0) {
    Method(_HID,0, Serialized)
    {
       if (EMMD)
         { Return (SHID) }
       else
         { Return (AHID) }
    }
    Method(_CID,0, Serialized)
    {
       if (EMMD)
         { Return (SCID) }
       else
         { Return (ACID) }
    }
    Name(_UID,0x0)
    Method(_CRS,0, Serialized)
    {
       if (EMD3)
         { Return (DCRS) }
       else
         { Return (NCRS) }
    }
    Method(_STA, 0, NotSerialized) {
        If (LGreaterEqual(TSOS, 0x70)) {
          if (EMME) {
            Return (0x0F)
          }
          Return (0x00)
        } Else {
          Return (0x00)
        }
    }
    Method(_INI, 0, NotSerialized) {
      if (EMME) {
        EPIN ()
      }
    }
    Method(_S0W,0) {
      if (LAnd(EMD3, EMME)) { Return(4) }
      else { Return(0)}
    }
    Method(_PS0,0) {
      if (LAnd(EMD3, EMME)) {
        HSAD (28, 0)
        RECR () // Restore Emmc Configure Register
      }
    }
    Method(_PS3,0) {
      if (LAnd(EMD3, EMME)) {
        HSAD (28, 3)
      }
    }
  } // End Device EMMC

Device(UAR1) {  // COM Port
  Name(_HID, EISAID("PNP0500"))
//  Name(_CID, EISAID("PNP0500"))
//  Name(_HID, EISAID("PNP0501"))
//  Name(_CID, EISAID("PNP0500"))
  Name(_DDN, "COM1")
  //*****************************************************
  // Method _STA:  Return Status
  //*****************************************************
  Method (_STA, 0, NotSerialized) { // Return Status of the UART
    if (IER0) {Return (0x0f)}
    Return (0x00)
  } // end of Method _STA
  //*****************************************************
  //  Method _CRS:  Return Current Resource Settings
  //*****************************************************
  Method (_CRS, 0, NotSerialized) {
    Name (BUF0, ResourceTemplate() {
      IO (Decode16, 0x2E8, 0x2E8, 0x01, 0x08)
       IRQNoFlags() {3}
    })
    //
    // Create some ByteFields in the Buffer in order to
    // permit saving values into the data portions of
    // each of the descriptors above.
    //
    CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
    CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
    CreateByteField (BUF0, 0x04, IORL) // IO Port Low
    CreateByteField (BUF0, 0x05, IORH) // IO Port High
    CreateWordField (BUF0, 0x09, IRQL) // IRQ
    // Enter Configuration Mode
    //
    // Get the IO setting from the chip, and copy it
    // to both the min & max for the IO descriptor.
    //
    // Low Bytes:
    //Store (CR61, IOLO)    // min.
    //Store (CR61, IORL)    // max.
    // High Bytes:
    //Store (CR60, IOHI)   // min.
    //Store (CR60, IORH)   // max.
    //
    // Get the IRQ setting from the chip, and shift
    // it into the Descriptor byte.
    //
    //ShiftLeft (Local0, CR70, IRQL)
    FRUI (WUR0,IRQL) //get Uart interrupt number
    Return(BUF0) // return the result
  } // end _CRS Method
} // end of Device UART1

Device(UAR2) {  // COM Port
  Name(_HID, EISAID("PNP0500"))
//  Name(_CID, EISAID("PNP0500"))
//  Name(_HID, EISAID("PNP0501"))
//  Name(_CID, EISAID("PNP0500"))
  Name(_DDN, "COM2")
  //*****************************************************
  // Method _STA:  Return Status
  //*****************************************************
  Method (_STA, 0, NotSerialized) { // Return Status of the UART
    if (IER1) {Return (0x0f)}
    Return (0x00)
  } // end of Method _STA
  //*****************************************************
  //  Method _CRS:  Return Current Resource Settings
  //*****************************************************
  Method (_CRS, 0, NotSerialized) {
    Name (BUF0, ResourceTemplate() {
      IO (Decode16, 0x2F8, 0x2F8, 0x01, 0x08)
       IRQNoFlags() {4}
    })
    //
    // Create some ByteFields in the Buffer in order to
    // permit saving values into the data portions of
    // each of the descriptors above.
    //
    CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
    CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
    CreateByteField (BUF0, 0x04, IORL) // IO Port Low
    CreateByteField (BUF0, 0x05, IORH) // IO Port High
    CreateWordField (BUF0, 0x09, IRQL) // IRQ
    // Enter Configuration Mode
    //
    // Get the IO setting from the chip, and copy it
    // to both the min & max for the IO descriptor.
    //
    // Low Bytes:
    //Store (CR61, IOLO)    // min.
    //Store (CR61, IORL)    // max.
    // High Bytes:
    //Store (CR60, IOHI)   // min.
    //Store (CR60, IORH)   // max.
    //
    // Get the IRQ setting from the chip, and shift
    // it into the Descriptor byte.
    //
    //ShiftLeft (Local0, CR70, IRQL)
    FRUI (WUR1,IRQL) //get Uart interrupt number
    Return(BUF0) // return the result
  } // end _CRS Method
} // end of Device UART2

Device(UAR3) {  // COM Port
  Name(_HID, EISAID("PNP0500"))
//  Name(_CID, EISAID("PNP0500"))
//  Name(_HID, EISAID("PNP0501"))
//  Name(_CID, EISAID("PNP0500"))
  Name(_DDN, "COM3")
  //*****************************************************
  // Method _STA:  Return Status
  //*****************************************************
  Method (_STA, 0, NotSerialized) { // Return Status of the UART
    if (IER2) {Return (0x0f)}
    Return (0x00)
  } // end of Method _STA
  //*****************************************************
  //  Method _CRS:  Return Current Resource Settings
  //*****************************************************
  Method (_CRS, 0, NotSerialized) {
    Name (BUF0, ResourceTemplate() {
      IO (Decode16, 0x3E8, 0x3E8, 0x01, 0x08)
       IRQNoFlags() {3}
    })
    //
    // Create some ByteFields in the Buffer in order to
    // permit saving values into the data portions of
    // each of the descriptors above.
    //
    CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
    CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
    CreateByteField (BUF0, 0x04, IORL) // IO Port Low
    CreateByteField (BUF0, 0x05, IORH) // IO Port High
    CreateWordField (BUF0, 0x09, IRQL) // IRQ
    // Enter Configuration Mode
    //
    // Get the IO setting from the chip, and copy it
    // to both the min & max for the IO descriptor.
    //
    // Low Bytes:
    //Store (CR61, IOLO)    // min.
    //Store (CR61, IORL)    // max.
    // High Bytes:
    //Store (CR60, IOHI)   // min.
    //Store (CR60, IORH)   // max.
    //
    // Get the IRQ setting from the chip, and shift
    // it into the Descriptor byte.
    //
    //ShiftLeft (Local0, CR70, IRQL)
    FRUI (WUR2,IRQL) //get Uart interrupt number
    Return(BUF0) // return the result
  } // end _CRS Method
} // end of Device UART3

Device(UAR4) {  // COM Port
  Name(_HID, EISAID("PNP0500"))
//  Name(_CID, EISAID("PNP0500"))
//  Name(_HID, EISAID("PNP0501"))
//  Name(_CID, EISAID("PNP0500"))
  Name(_DDN, "COM4")
  //*****************************************************
  // Method _STA:  Return Status
  //*****************************************************
  Method (_STA, 0, NotSerialized) { // Return Status of the UART
    if (IER3) {Return (0x0f)}
    Return (0x00)
  } // end of Method _STA
  //*****************************************************
  //  Method _CRS:  Return Current Resource Settings
  //*****************************************************
  Method (_CRS, 0, NotSerialized) {
    Name (BUF0, ResourceTemplate() {
      IO (Decode16, 0x3F8, 0x3F8, 0x01, 0x08)
       IRQNoFlags() {4}
    })
    //
    // Create some ByteFields in the Buffer in order to
    // permit saving values into the data portions of
    // each of the descriptors above.
    //
    CreateByteField (BUF0, 0x02, IOLO) // IO Port Low
    CreateByteField (BUF0, 0x03, IOHI) // IO Port Hi
    CreateByteField (BUF0, 0x04, IORL) // IO Port Low
    CreateByteField (BUF0, 0x05, IORH) // IO Port High
    CreateWordField (BUF0, 0x09, IRQL) // IRQ
    // Enter Configuration Mode
    //
    // Get the IO setting from the chip, and copy it
    // to both the min & max for the IO descriptor.
    //
    // Low Bytes:
    //Store (CR61, IOLO)    // min.
    //Store (CR61, IORL)    // max.
    // High Bytes:
    //Store (CR60, IOHI)   // min.
    //Store (CR60, IORH)   // max.
    //
    // Get the IRQ setting from the chip, and shift
    // it into the Descriptor byte.
    //
    //ShiftLeft (Local0, CR70, IRQL)
    FRUI (WUR3,IRQL) //get Uart interrupt number
    Return(BUF0) // return the result
  } // end _CRS Method
} // end of Device UART4
} // Scope SB

